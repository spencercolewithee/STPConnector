/*
 * SecureTransport End-User API v1.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.4.1
 * Contact: support@axway.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.avodagroup.securetransport.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
//.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * FolderSharingOptions
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-06-04T10:29:31.230-04:00[America/New_York]")public class FolderSharingOptions {

  @SerializedName("users")
  private List<String> users = null;

  @SerializedName("shareRights")
  private Integer shareRights = null;

  @SerializedName("notifications")
  private Integer notifications = null;

  @SerializedName("ownerNotifications")
  private Integer ownerNotifications = null;

  @SerializedName("showCollaboratorsToAll")
  private Boolean showCollaboratorsToAll = false;
  public FolderSharingOptions users(List<String> users) {
    this.users = users;
    return this;
  }

  public FolderSharingOptions addUsersItem(String usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<String>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
  * List of email addresses and/or address book group and user IDs that the folder is shared with
  * @return users
  **/
  //(description = "List of email addresses and/or address book group and user IDs that the folder is shared with")
  public List<String> getUsers() {
    return users;
  }
  public void setUsers(List<String> users) {
    this.users = users;
  }
  public FolderSharingOptions shareRights(Integer shareRights) {
    this.shareRights = shareRights;
    return this;
  }

  

  /**
  * The share rights
  * @return shareRights
  **/
  //(description = "The share rights")
  public Integer getShareRights() {
    return shareRights;
  }
  public void setShareRights(Integer shareRights) {
    this.shareRights = shareRights;
  }
  public FolderSharingOptions notifications(Integer notifications) {
    this.notifications = notifications;
    return this;
  }

  

  /**
  * Enable or disable notifications
  * @return notifications
  **/
  //(description = "Enable or disable notifications")
  public Integer getNotifications() {
    return notifications;
  }
  public void setNotifications(Integer notifications) {
    this.notifications = notifications;
  }
  public FolderSharingOptions ownerNotifications(Integer ownerNotifications) {
    this.ownerNotifications = ownerNotifications;
    return this;
  }

  

  /**
  * Enable or disable notifications for folder owner
  * @return ownerNotifications
  **/
  //(description = "Enable or disable notifications for folder owner")
  public Integer getOwnerNotifications() {
    return ownerNotifications;
  }
  public void setOwnerNotifications(Integer ownerNotifications) {
    this.ownerNotifications = ownerNotifications;
  }
  public FolderSharingOptions showCollaboratorsToAll(Boolean showCollaboratorsToAll) {
    this.showCollaboratorsToAll = showCollaboratorsToAll;
    return this;
  }

  

  /**
  * Define whether showing all collaborators is enabled or not.
  * @return showCollaboratorsToAll
  **/
  //(description = "Define whether showing all collaborators is enabled or not.")
  public Boolean isShowCollaboratorsToAll() {
    return showCollaboratorsToAll;
  }
  public void setShowCollaboratorsToAll(Boolean showCollaboratorsToAll) {
    this.showCollaboratorsToAll = showCollaboratorsToAll;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FolderSharingOptions folderSharingOptions = (FolderSharingOptions) o;
    return Objects.equals(this.users, folderSharingOptions.users) &&
        Objects.equals(this.shareRights, folderSharingOptions.shareRights) &&
        Objects.equals(this.notifications, folderSharingOptions.notifications) &&
        Objects.equals(this.ownerNotifications, folderSharingOptions.ownerNotifications) &&
        Objects.equals(this.showCollaboratorsToAll, folderSharingOptions.showCollaboratorsToAll);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(users, shareRights, notifications, ownerNotifications, showCollaboratorsToAll);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FolderSharingOptions {\n");
    
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    shareRights: ").append(toIndentedString(shareRights)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    ownerNotifications: ").append(toIndentedString(ownerNotifications)).append("\n");
    sb.append("    showCollaboratorsToAll: ").append(toIndentedString(showCollaboratorsToAll)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
