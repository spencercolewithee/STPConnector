/*
 * SecureTransport End-User API v1.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.4.1
 * Contact: support@axway.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.avodagroup.securetransport.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * AsyncOperation
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-06-04T10:29:31.230-04:00[America/New_York]")public class AsyncOperation {

  @SerializedName("id")
  private String id = null;
  /**
   * The name of the operation
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    MD5CALC("MD5Calc"),
    UPLOAD("Upload");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OperationEnum fromValue(String text) {
      for (OperationEnum b : OperationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperationEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("operation")
  private OperationEnum operation = null;

  @SerializedName("filePath")
  private String filePath = null;
  /**
   * The operation status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DONE("DONE"),
    IN_PROGRESS("IN_PROGRESS"),
    FAILED("FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("result")
  private AsyncOperationResult result = null;

  @SerializedName("errorMsg")
  private String errorMsg = null;

  @SerializedName("customAttributes")
  private AsyncOperationCustomAttributes customAttributes = null;
  public AsyncOperation id(String id) {
    this.id = id;
    return this;
  }

  

  /**
  * The operation id
  * @return id
  **/
  //(description = "The operation id")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }
  public AsyncOperation operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

  

  /**
  * The name of the operation
  * @return operation
  **/
  //(description = "The name of the operation")
  public OperationEnum getOperation() {
    return operation;
  }
  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }
  public AsyncOperation filePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  

  /**
  * The file path over which this operation will be executed
  * @return filePath
  **/
  //(description = "The file path over which this operation will be executed")
  public String getFilePath() {
    return filePath;
  }
  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }
  public AsyncOperation status(StatusEnum status) {
    this.status = status;
    return this;
  }

  

  /**
  * The operation status
  * @return status
  **/
  //(description = "The operation status")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }
  public AsyncOperation result(AsyncOperationResult result) {
    this.result = result;
    return this;
  }

  

  /**
  * Get result
  * @return result
  **/
  //(description = "")
  public AsyncOperationResult getResult() {
    return result;
  }
  public void setResult(AsyncOperationResult result) {
    this.result = result;
  }
  public AsyncOperation errorMsg(String errorMsg) {
    this.errorMsg = errorMsg;
    return this;
  }

  

  /**
  * Specifies the error message if the operation has failed.
  * @return errorMsg
  **/
  //(description = "Specifies the error message if the operation has failed.")
  public String getErrorMsg() {
    return errorMsg;
  }
  public void setErrorMsg(String errorMsg) {
    this.errorMsg = errorMsg;
  }
  public AsyncOperation customAttributes(AsyncOperationCustomAttributes customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  

  /**
  * Get customAttributes
  * @return customAttributes
  **/
  //(description = "")
  public AsyncOperationCustomAttributes getCustomAttributes() {
    return customAttributes;
  }
  public void setCustomAttributes(AsyncOperationCustomAttributes customAttributes) {
    this.customAttributes = customAttributes;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsyncOperation asyncOperation = (AsyncOperation) o;
    return Objects.equals(this.id, asyncOperation.id) &&
        Objects.equals(this.operation, asyncOperation.operation) &&
        Objects.equals(this.filePath, asyncOperation.filePath) &&
        Objects.equals(this.status, asyncOperation.status) &&
        Objects.equals(this.result, asyncOperation.result) &&
        Objects.equals(this.errorMsg, asyncOperation.errorMsg) &&
        Objects.equals(this.customAttributes, asyncOperation.customAttributes);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, operation, filePath, status, result, errorMsg, customAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsyncOperation {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    errorMsg: ").append(toIndentedString(errorMsg)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
