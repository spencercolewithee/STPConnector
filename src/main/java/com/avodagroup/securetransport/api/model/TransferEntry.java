/*
 * SecureTransport End-User API v1.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.4.1
 * Contact: support@axway.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.avodagroup.securetransport.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
//.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * TransferEntry
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-06-04T10:29:31.230-04:00[America/New_York]")public class TransferEntry {
  /**
   * The status of the transfer
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    IN_PROGRESS("In Progress"),
    PROCESSED("Processed"),
    FAILED("Failed"),
    ABORTED("Aborted"),
    PENDING_RECEIPT("Pending receipt"),
    FAILED_SUBTRANSMISSION("Failed Subtransmission"),
    PAUSED("Paused"),
    FAILED_TRANSFER_RESUBMIT("Failed Transfer Resubmit");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("secure")
  private Boolean secure = false;

  @SerializedName("account")
  private String account = null;

  @SerializedName("login")
  private String login = null;
  /**
   * Define the transfer direction
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    INCOMING("Incoming"),
    OUTGOING("Outgoing");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DirectionEnum fromValue(String text) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DirectionEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("direction")
  private DirectionEnum direction = null;
  /**
   * Defines whether the transfer is server or client initiated
   */
  @JsonAdapter(ActionByEnum.Adapter.class)
  public enum ActionByEnum {
    SERVER("Server"),
    USER("User");

    private String value;

    ActionByEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ActionByEnum fromValue(String text) {
      for (ActionByEnum b : ActionByEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ActionByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionByEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ActionByEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("actionBy")
  private ActionByEnum actionBy = null;

  @SerializedName("filename")
  private String filename = null;

  @SerializedName("filesize")
  private Long filesize = null;
  /**
   * The protocol used to transfer the file
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    AS2("as2"),
    FTP("ftp"),
    HTTP("http"),
    SSH("ssh"),
    PESIT("pesit"),
    FOLDER("folder"),
    ADHOC("adhoc"),
    SHAREPOINT("sharepoint"),
    SMB("smb"),
    HTTP_GENERIC("http-generic"),
    AMAZONS3("amazonS3");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProtocolEnum fromValue(String text) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProtocolEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("protocol")
  private ProtocolEnum protocol = null;

  @SerializedName("startTime")
  private String startTime = null;

  @SerializedName("duration")
  private String duration = null;

  @SerializedName("operationIndex")
  private String operationIndex = null;

  @SerializedName("coreId")
  private String coreId = null;
  public TransferEntry status(StatusEnum status) {
    this.status = status;
    return this;
  }

  

  /**
  * The status of the transfer
  * @return status
  **/
  //(description = "The status of the transfer")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }
  public TransferEntry secure(Boolean secure) {
    this.secure = secure;
    return this;
  }

  

  /**
  * Defines whether the transfer occurred over secure connection
  * @return secure
  **/
  //(description = "Defines whether the transfer occurred over secure connection")
  public Boolean isSecure() {
    return secure;
  }
  public void setSecure(Boolean secure) {
    this.secure = secure;
  }
  public TransferEntry account(String account) {
    this.account = account;
    return this;
  }

  

  /**
  * The name of the account that performed the transfer
  * @return account
  **/
  //(description = "The name of the account that performed the transfer")
  public String getAccount() {
    return account;
  }
  public void setAccount(String account) {
    this.account = account;
  }
  public TransferEntry login(String login) {
    this.login = login;
    return this;
  }

  

  /**
  * The user login name used for this transfer
  * @return login
  **/
  //(description = "The user login name used for this transfer")
  public String getLogin() {
    return login;
  }
  public void setLogin(String login) {
    this.login = login;
  }
  public TransferEntry direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

  

  /**
  * Define the transfer direction
  * @return direction
  **/
  //(description = "Define the transfer direction")
  public DirectionEnum getDirection() {
    return direction;
  }
  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }
  public TransferEntry actionBy(ActionByEnum actionBy) {
    this.actionBy = actionBy;
    return this;
  }

  

  /**
  * Defines whether the transfer is server or client initiated
  * @return actionBy
  **/
  //(description = "Defines whether the transfer is server or client initiated")
  public ActionByEnum getActionBy() {
    return actionBy;
  }
  public void setActionBy(ActionByEnum actionBy) {
    this.actionBy = actionBy;
  }
  public TransferEntry filename(String filename) {
    this.filename = filename;
    return this;
  }

  

  /**
  * The name of the transferred file
  * @return filename
  **/
  //(description = "The name of the transferred file")
  public String getFilename() {
    return filename;
  }
  public void setFilename(String filename) {
    this.filename = filename;
  }
  public TransferEntry filesize(Long filesize) {
    this.filesize = filesize;
    return this;
  }

  

  /**
  * Transfered file size
  * @return filesize
  **/
  //(description = "Transfered file size")
  public Long getFilesize() {
    return filesize;
  }
  public void setFilesize(Long filesize) {
    this.filesize = filesize;
  }
  public TransferEntry protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  

  /**
  * The protocol used to transfer the file
  * @return protocol
  **/
  //(description = "The protocol used to transfer the file")
  public ProtocolEnum getProtocol() {
    return protocol;
  }
  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }
  public TransferEntry startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  

  /**
  * The time when transfer started in RFC2822 format (EEE, d MMM yyyy HH:mm:ss Z)
  * @return startTime
  **/
  //(description = "The time when transfer started in RFC2822 format (EEE, d MMM yyyy HH:mm:ss Z)")
  public String getStartTime() {
    return startTime;
  }
  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }
  public TransferEntry duration(String duration) {
    this.duration = duration;
    return this;
  }

  

  /**
  * Defines the time when transfer is finished (in miliseconds)
  * @return duration
  **/
  //(description = "Defines the time when transfer is finished (in miliseconds)")
  public String getDuration() {
    return duration;
  }
  public void setDuration(String duration) {
    this.duration = duration;
  }
  public TransferEntry operationIndex(String operationIndex) {
    this.operationIndex = operationIndex;
    return this;
  }

  

  /**
  * The operation index of the transfer. It could be &#x27;(none)&#x27; or some ID.
  * @return operationIndex
  **/
  //(description = "The operation index of the transfer. It could be '(none)' or some ID.")
  public String getOperationIndex() {
    return operationIndex;
  }
  public void setOperationIndex(String operationIndex) {
    this.operationIndex = operationIndex;
  }
  public TransferEntry coreId(String coreId) {
    this.coreId = coreId;
    return this;
  }

  

  /**
  * The core id of the transfer
  * @return coreId
  **/
  //(description = "The core id of the transfer")
  public String getCoreId() {
    return coreId;
  }
  public void setCoreId(String coreId) {
    this.coreId = coreId;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferEntry transferEntry = (TransferEntry) o;
    return Objects.equals(this.status, transferEntry.status) &&
        Objects.equals(this.secure, transferEntry.secure) &&
        Objects.equals(this.account, transferEntry.account) &&
        Objects.equals(this.login, transferEntry.login) &&
        Objects.equals(this.direction, transferEntry.direction) &&
        Objects.equals(this.actionBy, transferEntry.actionBy) &&
        Objects.equals(this.filename, transferEntry.filename) &&
        Objects.equals(this.filesize, transferEntry.filesize) &&
        Objects.equals(this.protocol, transferEntry.protocol) &&
        Objects.equals(this.startTime, transferEntry.startTime) &&
        Objects.equals(this.duration, transferEntry.duration) &&
        Objects.equals(this.operationIndex, transferEntry.operationIndex) &&
        Objects.equals(this.coreId, transferEntry.coreId);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(status, secure, account, login, direction, actionBy, filename, filesize, protocol, startTime, duration, operationIndex, coreId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferEntry {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    secure: ").append(toIndentedString(secure)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    actionBy: ").append(toIndentedString(actionBy)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    filesize: ").append(toIndentedString(filesize)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    operationIndex: ").append(toIndentedString(operationIndex)).append("\n");
    sb.append("    coreId: ").append(toIndentedString(coreId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
