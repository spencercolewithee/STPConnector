/*
 * SecureTransport End-User API v1.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.4.1
 * Contact: support@axway.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.avodagroup.securetransport.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
//.client.model.SubtransmissionStatuses;
//.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * TransferLogDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-06-04T10:29:31.230-04:00[America/New_York]")public class TransferLogDetails {

  @SerializedName("status")
  private String status = null;

  @SerializedName("startTime")
  private String startTime = null;

  @SerializedName("duration")
  private String duration = null;

  @SerializedName("account")
  private String account = null;

  @SerializedName("login")
  private String login = null;

  @SerializedName("userClass")
  private String userClass = null;

  @SerializedName("userType")
  private String userType = null;

  @SerializedName("application")
  private String application = null;
  /**
   * The transfer type
   */
  @JsonAdapter(TransferTypeEnum.Adapter.class)
  public enum TransferTypeEnum {
    AUTO_PULL("Auto-Pull"),
    AUTO_PUSH("Auto-Push"),
    USER_UPLOAD("User upload"),
    USER_DOWNLOAD("User download");

    private String value;

    TransferTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TransferTypeEnum fromValue(String text) {
      for (TransferTypeEnum b : TransferTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TransferTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransferTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransferTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TransferTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("transferType")
  private TransferTypeEnum transferType = null;

  @SerializedName("transferSite")
  private String transferSite = null;

  @SerializedName("file")
  private String file = null;

  @SerializedName("size")
  private Long size = null;
  /**
   * The protocol of the transfer
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    AS2("as2"),
    FTP("ftp"),
    HTTP("http"),
    SSH("ssh"),
    PESIT("pesit"),
    FOLDER("folder"),
    ADHOC("adhoc"),
    SHAREPOINT("sharepoint"),
    SMB("smb"),
    HTTP_GENERIC("http-generic"),
    AMAZONS3("amazonS3");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProtocolEnum fromValue(String text) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProtocolEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("protocol")
  private ProtocolEnum protocol = null;
  /**
   * The transfer mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    BINARY("BINARY"),
    ASCII("ASCII"),
    EBCDIC("EBCDIC"),
    EBCDIC_NATIVE("EBCDIC_NATIVE");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ModeEnum fromValue(String text) {
      for (ModeEnum b : ModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ModeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("mode")
  private ModeEnum mode = null;

  @SerializedName("remoteHost")
  private String remoteHost = null;

  @SerializedName("remoteFolder")
  private String remoteFolder = null;

  @SerializedName("accountFolder")
  private String accountFolder = null;

  @SerializedName("realFile")
  private String realFile = null;

  @SerializedName("transferId")
  private String transferId = null;

  @SerializedName("sessionId")
  private String sessionId = null;

  @SerializedName("archivedAs")
  private String archivedAs = null;

  @SerializedName("successMessage")
  private String successMessage = null;

  @SerializedName("errorMessage")
  private String errorMessage = null;

  @SerializedName("pesitAcknowledge")
  private String pesitAcknowledge = null;

  @SerializedName("operationIndex")
  private String operationIndex = null;

  @SerializedName("coreId")
  private String coreId = null;

  @SerializedName("protocolCommands")
  private String protocolCommands = null;

  @SerializedName("subtransmissionStatuses")
  private SubtransmissionStatuses subtransmissionStatuses = null;

  @SerializedName("requestEntity")
  private String requestEntity = null;

  @SerializedName("additionalInformation")
  private String additionalInformation = null;
  public TransferLogDetails status(String status) {
    this.status = status;
    return this;
  }

  

  /**
  * The status of the transfer
  * @return status
  **/
  //(description = "The status of the transfer")
  public String getStatus() {
    return status;
  }
  public void setStatus(String status) {
    this.status = status;
  }
  public TransferLogDetails startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  

  /**
  * The time when the transfer started in RFC2822 format (EEE, d MMM yyyy HH:mm:ss Z)
  * @return startTime
  **/
  //(description = "The time when the transfer started in RFC2822 format (EEE, d MMM yyyy HH:mm:ss Z)")
  public String getStartTime() {
    return startTime;
  }
  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }
  public TransferLogDetails duration(String duration) {
    this.duration = duration;
    return this;
  }

  

  /**
  * The transfer duration (in milliseconds)
  * @return duration
  **/
  //(description = "The transfer duration (in milliseconds)")
  public String getDuration() {
    return duration;
  }
  public void setDuration(String duration) {
    this.duration = duration;
  }
  public TransferLogDetails account(String account) {
    this.account = account;
    return this;
  }

  

  /**
  * The name of the account that performed the transfer
  * @return account
  **/
  //(description = "The name of the account that performed the transfer")
  public String getAccount() {
    return account;
  }
  public void setAccount(String account) {
    this.account = account;
  }
  public TransferLogDetails login(String login) {
    this.login = login;
    return this;
  }

  

  /**
  * The user login name used for this transfer
  * @return login
  **/
  //(description = "The user login name used for this transfer")
  public String getLogin() {
    return login;
  }
  public void setLogin(String login) {
    this.login = login;
  }
  public TransferLogDetails userClass(String userClass) {
    this.userClass = userClass;
    return this;
  }

  

  /**
  * The user class. By default the user class can be &#x60;VirtClass&#x60; or &#x60;RealClass&#x60;
  * @return userClass
  **/
  //(description = "The user class. By default the user class can be `VirtClass` or `RealClass`")
  public String getUserClass() {
    return userClass;
  }
  public void setUserClass(String userClass) {
    this.userClass = userClass;
  }
  public TransferLogDetails userType(String userType) {
    this.userType = userType;
    return this;
  }

  

  /**
  * The user type
  * @return userType
  **/
  //(description = "The user type")
  public String getUserType() {
    return userType;
  }
  public void setUserType(String userType) {
    this.userType = userType;
  }
  public TransferLogDetails application(String application) {
    this.application = application;
    return this;
  }

  

  /**
  * The application of the transfer
  * @return application
  **/
  //(description = "The application of the transfer")
  public String getApplication() {
    return application;
  }
  public void setApplication(String application) {
    this.application = application;
  }
  public TransferLogDetails transferType(TransferTypeEnum transferType) {
    this.transferType = transferType;
    return this;
  }

  

  /**
  * The transfer type
  * @return transferType
  **/
  //(description = "The transfer type")
  public TransferTypeEnum getTransferType() {
    return transferType;
  }
  public void setTransferType(TransferTypeEnum transferType) {
    this.transferType = transferType;
  }
  public TransferLogDetails transferSite(String transferSite) {
    this.transferSite = transferSite;
    return this;
  }

  

  /**
  * The transfer site
  * @return transferSite
  **/
  //(description = "The transfer site")
  public String getTransferSite() {
    return transferSite;
  }
  public void setTransferSite(String transferSite) {
    this.transferSite = transferSite;
  }
  public TransferLogDetails file(String file) {
    this.file = file;
    return this;
  }

  

  /**
  * The transferred file
  * @return file
  **/
  //(description = "The transferred file")
  public String getFile() {
    return file;
  }
  public void setFile(String file) {
    this.file = file;
  }
  public TransferLogDetails size(Long size) {
    this.size = size;
    return this;
  }

  

  /**
  * The size of the transferred file
  * @return size
  **/
  //(description = "The size of the transferred file")
  public Long getSize() {
    return size;
  }
  public void setSize(Long size) {
    this.size = size;
  }
  public TransferLogDetails protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  

  /**
  * The protocol of the transfer
  * @return protocol
  **/
  //(description = "The protocol of the transfer")
  public ProtocolEnum getProtocol() {
    return protocol;
  }
  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }
  public TransferLogDetails mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  

  /**
  * The transfer mode
  * @return mode
  **/
  //(description = "The transfer mode")
  public ModeEnum getMode() {
    return mode;
  }
  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }
  public TransferLogDetails remoteHost(String remoteHost) {
    this.remoteHost = remoteHost;
    return this;
  }

  

  /**
  * The remote host
  * @return remoteHost
  **/
  //(description = "The remote host")
  public String getRemoteHost() {
    return remoteHost;
  }
  public void setRemoteHost(String remoteHost) {
    this.remoteHost = remoteHost;
  }
  public TransferLogDetails remoteFolder(String remoteFolder) {
    this.remoteFolder = remoteFolder;
    return this;
  }

  

  /**
  * The remote folder
  * @return remoteFolder
  **/
  //(description = "The remote folder")
  public String getRemoteFolder() {
    return remoteFolder;
  }
  public void setRemoteFolder(String remoteFolder) {
    this.remoteFolder = remoteFolder;
  }
  public TransferLogDetails accountFolder(String accountFolder) {
    this.accountFolder = accountFolder;
    return this;
  }

  

  /**
  * The account folder
  * @return accountFolder
  **/
  //(description = "The account folder")
  public String getAccountFolder() {
    return accountFolder;
  }
  public void setAccountFolder(String accountFolder) {
    this.accountFolder = accountFolder;
  }
  public TransferLogDetails realFile(String realFile) {
    this.realFile = realFile;
    return this;
  }

  

  /**
  * The real file path
  * @return realFile
  **/
  //(description = "The real file path")
  public String getRealFile() {
    return realFile;
  }
  public void setRealFile(String realFile) {
    this.realFile = realFile;
  }
  public TransferLogDetails transferId(String transferId) {
    this.transferId = transferId;
    return this;
  }

  

  /**
  * The id of the transfer
  * @return transferId
  **/
  //(description = "The id of the transfer")
  public String getTransferId() {
    return transferId;
  }
  public void setTransferId(String transferId) {
    this.transferId = transferId;
  }
  public TransferLogDetails sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  

  /**
  * The session ID of the transfer
  * @return sessionId
  **/
  //(description = "The session ID of the transfer")
  public String getSessionId() {
    return sessionId;
  }
  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }
  public TransferLogDetails archivedAs(String archivedAs) {
    this.archivedAs = archivedAs;
    return this;
  }

  

  /**
  * The name under which the transferred file is archived
  * @return archivedAs
  **/
  //(description = "The name under which the transferred file is archived")
  public String getArchivedAs() {
    return archivedAs;
  }
  public void setArchivedAs(String archivedAs) {
    this.archivedAs = archivedAs;
  }
  public TransferLogDetails successMessage(String successMessage) {
    this.successMessage = successMessage;
    return this;
  }

  

  /**
  * The transfer success message
  * @return successMessage
  **/
  //(description = "The transfer success message")
  public String getSuccessMessage() {
    return successMessage;
  }
  public void setSuccessMessage(String successMessage) {
    this.successMessage = successMessage;
  }
  public TransferLogDetails errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  

  /**
  * The transfer error message
  * @return errorMessage
  **/
  //(description = "The transfer error message")
  public String getErrorMessage() {
    return errorMessage;
  }
  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }
  public TransferLogDetails pesitAcknowledge(String pesitAcknowledge) {
    this.pesitAcknowledge = pesitAcknowledge;
    return this;
  }

  

  /**
  * The PeSIT acknowledge
  * @return pesitAcknowledge
  **/
  //(description = "The PeSIT acknowledge")
  public String getPesitAcknowledge() {
    return pesitAcknowledge;
  }
  public void setPesitAcknowledge(String pesitAcknowledge) {
    this.pesitAcknowledge = pesitAcknowledge;
  }
  public TransferLogDetails operationIndex(String operationIndex) {
    this.operationIndex = operationIndex;
    return this;
  }

  

  /**
  * The transfer&#x27;s operation index
  * @return operationIndex
  **/
  //(description = "The transfer's operation index")
  public String getOperationIndex() {
    return operationIndex;
  }
  public void setOperationIndex(String operationIndex) {
    this.operationIndex = operationIndex;
  }
  public TransferLogDetails coreId(String coreId) {
    this.coreId = coreId;
    return this;
  }

  

  /**
  * The core id of the transfer
  * @return coreId
  **/
  //(description = "The core id of the transfer")
  public String getCoreId() {
    return coreId;
  }
  public void setCoreId(String coreId) {
    this.coreId = coreId;
  }
  public TransferLogDetails protocolCommands(String protocolCommands) {
    this.protocolCommands = protocolCommands;
    return this;
  }

  

  /**
  * The transfer protocol commands
  * @return protocolCommands
  **/
  //(description = "The transfer protocol commands")
  public String getProtocolCommands() {
    return protocolCommands;
  }
  public void setProtocolCommands(String protocolCommands) {
    this.protocolCommands = protocolCommands;
  }
  public TransferLogDetails subtransmissionStatuses(SubtransmissionStatuses subtransmissionStatuses) {
    this.subtransmissionStatuses = subtransmissionStatuses;
    return this;
  }

  

  /**
  * Get subtransmissionStatuses
  * @return subtransmissionStatuses
  **/
  //(description = "")
  public SubtransmissionStatuses getSubtransmissionStatuses() {
    return subtransmissionStatuses;
  }
  public void setSubtransmissionStatuses(SubtransmissionStatuses subtransmissionStatuses) {
    this.subtransmissionStatuses = subtransmissionStatuses;
  }
  public TransferLogDetails requestEntity(String requestEntity) {
    this.requestEntity = requestEntity;
    return this;
  }

  

  /**
  * Representation of the rest api call that initiated the transfer(if submitted through the ST RESTful API).
  * @return requestEntity
  **/
  //(description = "Representation of the rest api call that initiated the transfer(if submitted through the ST RESTful API).")
  public String getRequestEntity() {
    return requestEntity;
  }
  public void setRequestEntity(String requestEntity) {
    this.requestEntity = requestEntity;
  }
  public TransferLogDetails additionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

  

  /**
  * The additional information related to this transfer.
  * @return additionalInformation
  **/
  //(description = "The additional information related to this transfer.")
  public String getAdditionalInformation() {
    return additionalInformation;
  }
  public void setAdditionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferLogDetails transferLogDetails = (TransferLogDetails) o;
    return Objects.equals(this.status, transferLogDetails.status) &&
        Objects.equals(this.startTime, transferLogDetails.startTime) &&
        Objects.equals(this.duration, transferLogDetails.duration) &&
        Objects.equals(this.account, transferLogDetails.account) &&
        Objects.equals(this.login, transferLogDetails.login) &&
        Objects.equals(this.userClass, transferLogDetails.userClass) &&
        Objects.equals(this.userType, transferLogDetails.userType) &&
        Objects.equals(this.application, transferLogDetails.application) &&
        Objects.equals(this.transferType, transferLogDetails.transferType) &&
        Objects.equals(this.transferSite, transferLogDetails.transferSite) &&
        Objects.equals(this.file, transferLogDetails.file) &&
        Objects.equals(this.size, transferLogDetails.size) &&
        Objects.equals(this.protocol, transferLogDetails.protocol) &&
        Objects.equals(this.mode, transferLogDetails.mode) &&
        Objects.equals(this.remoteHost, transferLogDetails.remoteHost) &&
        Objects.equals(this.remoteFolder, transferLogDetails.remoteFolder) &&
        Objects.equals(this.accountFolder, transferLogDetails.accountFolder) &&
        Objects.equals(this.realFile, transferLogDetails.realFile) &&
        Objects.equals(this.transferId, transferLogDetails.transferId) &&
        Objects.equals(this.sessionId, transferLogDetails.sessionId) &&
        Objects.equals(this.archivedAs, transferLogDetails.archivedAs) &&
        Objects.equals(this.successMessage, transferLogDetails.successMessage) &&
        Objects.equals(this.errorMessage, transferLogDetails.errorMessage) &&
        Objects.equals(this.pesitAcknowledge, transferLogDetails.pesitAcknowledge) &&
        Objects.equals(this.operationIndex, transferLogDetails.operationIndex) &&
        Objects.equals(this.coreId, transferLogDetails.coreId) &&
        Objects.equals(this.protocolCommands, transferLogDetails.protocolCommands) &&
        Objects.equals(this.subtransmissionStatuses, transferLogDetails.subtransmissionStatuses) &&
        Objects.equals(this.requestEntity, transferLogDetails.requestEntity) &&
        Objects.equals(this.additionalInformation, transferLogDetails.additionalInformation);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(status, startTime, duration, account, login, userClass, userType, application, transferType, transferSite, file, size, protocol, mode, remoteHost, remoteFolder, accountFolder, realFile, transferId, sessionId, archivedAs, successMessage, errorMessage, pesitAcknowledge, operationIndex, coreId, protocolCommands, subtransmissionStatuses, requestEntity, additionalInformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferLogDetails {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    userClass: ").append(toIndentedString(userClass)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    transferType: ").append(toIndentedString(transferType)).append("\n");
    sb.append("    transferSite: ").append(toIndentedString(transferSite)).append("\n");
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    remoteHost: ").append(toIndentedString(remoteHost)).append("\n");
    sb.append("    remoteFolder: ").append(toIndentedString(remoteFolder)).append("\n");
    sb.append("    accountFolder: ").append(toIndentedString(accountFolder)).append("\n");
    sb.append("    realFile: ").append(toIndentedString(realFile)).append("\n");
    sb.append("    transferId: ").append(toIndentedString(transferId)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    archivedAs: ").append(toIndentedString(archivedAs)).append("\n");
    sb.append("    successMessage: ").append(toIndentedString(successMessage)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    pesitAcknowledge: ").append(toIndentedString(pesitAcknowledge)).append("\n");
    sb.append("    operationIndex: ").append(toIndentedString(operationIndex)).append("\n");
    sb.append("    coreId: ").append(toIndentedString(coreId)).append("\n");
    sb.append("    protocolCommands: ").append(toIndentedString(protocolCommands)).append("\n");
    sb.append("    subtransmissionStatuses: ").append(toIndentedString(subtransmissionStatuses)).append("\n");
    sb.append("    requestEntity: ").append(toIndentedString(requestEntity)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
