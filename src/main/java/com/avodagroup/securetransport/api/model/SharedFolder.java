/*
 * SecureTransport End-User API v1.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.4.1
 * Contact: support@axway.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.avodagroup.securetransport.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
//.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SharedFolder
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-06-04T10:29:31.230-04:00[America/New_York]")public class SharedFolder {

  @SerializedName("name")
  private String name = null;

  @SerializedName("isShared")
  private Boolean isShared = false;

  @SerializedName("owner")
  private String owner = null;

  @SerializedName("isOwner")
  private Boolean isOwner = false;

  @SerializedName("shareRights")
  private Integer shareRights = null;

  @SerializedName("enableNotifications")
  private Boolean enableNotifications = false;

  @SerializedName("enableOwnerNotifications")
  private Boolean enableOwnerNotifications = false;

  @SerializedName("showCollaboratorsToAll")
  private Boolean showCollaboratorsToAll = false;

  @SerializedName("collaborators")
  private List<String> collaborators = null;
  public SharedFolder name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * The name of the folder
  * @return name
  **/
  //(description = "The name of the folder")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public SharedFolder isShared(Boolean isShared) {
    this.isShared = isShared;
    return this;
  }

  

  /**
  * Define whether the folder is shared with other users (true if shared, false otherwise)
  * @return isShared
  **/
  //(description = "Define whether the folder is shared with other users (true if shared, false otherwise)")
  public Boolean isIsShared() {
    return isShared;
  }
  public void setIsShared(Boolean isShared) {
    this.isShared = isShared;
  }
  public SharedFolder owner(String owner) {
    this.owner = owner;
    return this;
  }

  

  /**
  * The folder owner
  * @return owner
  **/
  //(description = "The folder owner")
  public String getOwner() {
    return owner;
  }
  public void setOwner(String owner) {
    this.owner = owner;
  }
  public SharedFolder isOwner(Boolean isOwner) {
    this.isOwner = isOwner;
    return this;
  }

  

  /**
  * Define whether the currently logged-in user is the folder owner (true if the user is the owner, otherwise false)
  * @return isOwner
  **/
  //(description = "Define whether the currently logged-in user is the folder owner (true if the user is the owner, otherwise false)")
  public Boolean isIsOwner() {
    return isOwner;
  }
  public void setIsOwner(Boolean isOwner) {
    this.isOwner = isOwner;
  }
  public SharedFolder shareRights(Integer shareRights) {
    this.shareRights = shareRights;
    return this;
  }

  

  /**
  * The the shared rights. Permissions: value **1** for &#x60;Download files&#x60;, value **3** for &#x60;Download and Upload files&#x60;, value **7** for &#x60;Download, Upload and Overwrite files&#x60;.\&quot; 
  * @return shareRights
  **/
  //(description = "The the shared rights. Permissions: value **1** for `Download files`, value **3** for `Download and Upload files`, value **7** for `Download, Upload and Overwrite files`.\" ")
  public Integer getShareRights() {
    return shareRights;
  }
  public void setShareRights(Integer shareRights) {
    this.shareRights = shareRights;
  }
  public SharedFolder enableNotifications(Boolean enableNotifications) {
    this.enableNotifications = enableNotifications;
    return this;
  }

  

  /**
  * Define whether the notifications are enabled (true if notifications are enabled, otherwise - false)
  * @return enableNotifications
  **/
  //(description = "Define whether the notifications are enabled (true if notifications are enabled, otherwise - false)")
  public Boolean isEnableNotifications() {
    return enableNotifications;
  }
  public void setEnableNotifications(Boolean enableNotifications) {
    this.enableNotifications = enableNotifications;
  }
  public SharedFolder enableOwnerNotifications(Boolean enableOwnerNotifications) {
    this.enableOwnerNotifications = enableOwnerNotifications;
    return this;
  }

  

  /**
  * Define whether the notifications are enabled for the folder owner(true if owner notifications are enabled, otherwise - false)
  * @return enableOwnerNotifications
  **/
  //(description = "Define whether the notifications are enabled for the folder owner(true if owner notifications are enabled, otherwise - false)")
  public Boolean isEnableOwnerNotifications() {
    return enableOwnerNotifications;
  }
  public void setEnableOwnerNotifications(Boolean enableOwnerNotifications) {
    this.enableOwnerNotifications = enableOwnerNotifications;
  }
  public SharedFolder showCollaboratorsToAll(Boolean showCollaboratorsToAll) {
    this.showCollaboratorsToAll = showCollaboratorsToAll;
    return this;
  }

  

  /**
  * Define whether the showing collaborators is enabled to all (true if enabled, false otherwise)
  * @return showCollaboratorsToAll
  **/
  //(description = "Define whether the showing collaborators is enabled to all (true if enabled, false otherwise)")
  public Boolean isShowCollaboratorsToAll() {
    return showCollaboratorsToAll;
  }
  public void setShowCollaboratorsToAll(Boolean showCollaboratorsToAll) {
    this.showCollaboratorsToAll = showCollaboratorsToAll;
  }
  public SharedFolder collaborators(List<String> collaborators) {
    this.collaborators = collaborators;
    return this;
  }

  public SharedFolder addCollaboratorsItem(String collaboratorsItem) {
    if (this.collaborators == null) {
      this.collaborators = new ArrayList<String>();
    }
    this.collaborators.add(collaboratorsItem);
    return this;
  }

  /**
  * A set of collaborators&#x27; email addresses.
  * @return collaborators
  **/
  //(description = "A set of collaborators' email addresses.")
  public List<String> getCollaborators() {
    return collaborators;
  }
  public void setCollaborators(List<String> collaborators) {
    this.collaborators = collaborators;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedFolder sharedFolder = (SharedFolder) o;
    return Objects.equals(this.name, sharedFolder.name) &&
        Objects.equals(this.isShared, sharedFolder.isShared) &&
        Objects.equals(this.owner, sharedFolder.owner) &&
        Objects.equals(this.isOwner, sharedFolder.isOwner) &&
        Objects.equals(this.shareRights, sharedFolder.shareRights) &&
        Objects.equals(this.enableNotifications, sharedFolder.enableNotifications) &&
        Objects.equals(this.enableOwnerNotifications, sharedFolder.enableOwnerNotifications) &&
        Objects.equals(this.showCollaboratorsToAll, sharedFolder.showCollaboratorsToAll) &&
        Objects.equals(this.collaborators, sharedFolder.collaborators);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, isShared, owner, isOwner, shareRights, enableNotifications, enableOwnerNotifications, showCollaboratorsToAll, collaborators);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedFolder {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isShared: ").append(toIndentedString(isShared)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    isOwner: ").append(toIndentedString(isOwner)).append("\n");
    sb.append("    shareRights: ").append(toIndentedString(shareRights)).append("\n");
    sb.append("    enableNotifications: ").append(toIndentedString(enableNotifications)).append("\n");
    sb.append("    enableOwnerNotifications: ").append(toIndentedString(enableOwnerNotifications)).append("\n");
    sb.append("    showCollaboratorsToAll: ").append(toIndentedString(showCollaboratorsToAll)).append("\n");
    sb.append("    collaborators: ").append(toIndentedString(collaborators)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
